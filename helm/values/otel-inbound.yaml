fullnameOverride: "opentelemetry-collector"
namespaceOverride: "otel-inbound"

mode: "deployment"

# Pod DNS policy
# https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
dnsPolicy: "ClusterFirst"

################################################
##### Collector configuration
################################################

config:
  # Receivers
  receivers:
    jaeger: null
    zipkin: null
    otlp:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:4317
        http:
          endpoint: ${env:MY_POD_IP}:4318

  # Processors
  processors:
    batch:
      send_batch_size: 200 # 8192
      timeout: 1s
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25

  # Exporters
  exporters:
    debug:
      verbosity: detailed
      sampling_initial: 5
      sampling_thereafter: 200
    otlp:
      endpoint: "opentelemetry-collector.otel-outbound.svc.cluster.local:43177"
      compression: none
      tls:
        insecure: true
      sending_queue:
        storage: file_storage
        enabled: true
        num_consumers: 10
        wait_for_result: false
        block_on_overflow: true
        sizer: requests
        queue_size: 100
      timeout: 5s
      retry_on_failure:
        enabled: true
        initial_interval: 5s
        max_interval: 30s
        max_elapsed_time: 600s
        multiplier: 1.5
    otlphttp:
      endpoint: "http://opentelemetry-collector.otel-outbound.svc.cluster.local:43188"
      compression: zstd
      encoding: proto
      tls:
        insecure: true
      sending_queue:
        storage: file_storage
        enabled: true
        num_consumers: 10
        wait_for_result: false
        block_on_overflow: false
        sizer: requests
        queue_size: 1000
      timeout: 5s
      retry_on_failure:
        enabled: true
        initial_interval: 5s
        max_interval: 30s
        max_elapsed_time: 600s
        multiplier: 1.5

  # Extensions
  extensions:
    health_check:
      endpoint: ${env:MY_POD_IP}:13133
    redis_storage:
      # db: 0
      endpoint: "valkey-primary.valkey.svc.cluster.local:6379"
      expiration: 10m
      password: "potatoes"
      tls:
        insecure: true
    file_storage:
      directory: /var/lib/otelcol/storage
      create_directory: true
      timeout: 1s
      compaction:
        on_start: true
        directory: /var/lib/otelcol/compaction
        max_transaction_size: 65_536
      fsync: false

  # Service
  service:
    telemetry:
      logs:
        level: DEBUG
    extensions:
      - health_check
      - redis_storage
      - file_storage
    pipelines:
      logs:
        receivers:
          - otlp
        processors:
          - memory_limiter
          - batch
        exporters:
          - otlphttp
          - debug
      metrics:
        receivers:
          - otlp
        processors:
          - memory_limiter
          - batch
        exporters:
          - otlphttp
          - debug
      traces:
        receivers:
          - otlp
        processors:
          - memory_limiter
          - batch
        exporters:
          - otlphttp
          - debug

configMap:
  create: true
  existingName: ""

################################################
##### Other configurations
################################################

# contrib distribution
# all available distrutions can be found in the image.repository url
image:
  # repository: "ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"
  repository: "ghcr.io/gjpin/otelcontribcol"
  tag: "latest"
  pullPolicy: IfNotPresent

# We're not using otel-collector in a standard way.
# We already have a collector (Alloy), so we disable all presets.
presets:
  logsCollection:
    enabled: false
  hostMetrics:
    enabled: false
  kubernetesAttributes:
    enabled: false
  kubeletMetrics:
    enabled: false
  kubernetesEvents:
    enabled: false
  clusterMetrics:
    enabled: false

# service account
serviceAccount:
  create: true
  name: "opentelemetry-collector"

# RBAC
clusterRole:
  create: false

# Configuration for ports
ports:
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    protocol: TCP
    appProtocol: grpc
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    protocol: TCP
  metrics:
    enabled: false
    containerPort: 8888
    servicePort: 8888
    protocol: TCP1

# When enabled, the chart will set the GOMEMLIMIT env var to 80% of the configured resources.limits.memory.
# useGOMEMLIMIT: true

# Resource limits & requests
# resources:
#   requests:
#     cpu: 750m
#     memory: 3500Mi
#   limits:
#     cpu: 1000m
#     memory: 4000Mi

podAnnotations: {}

podLabels:
  app: opentelemetry-operator

# Host networking
hostNetwork: false

# only used with deployment mode
replicaCount: 3

# only used with deployment mode
revisionHistoryLimit: 10

# liveness probe
livenessProbe:
  initialDelaySeconds: 1
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 1
  terminationGracePeriodSeconds: 10
  httpGet:
    port: 13133
    path: /

# readiness probe
readinessProbe:
  initialDelaySeconds: 1
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 1
  httpGet:
    port: 13133
    path: /

# startup probe
startupProbe:
  initialDelaySeconds: 1
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 1
  terminationGracePeriodSeconds: 10
  httpGet:
    port: 13133
    path: /

# service
service:
  enabled: true
  type: ClusterIP
  trafficDistribution: PreferClose

# disable ingress
ingress:
  enabled: false

# pod monitor
podMonitor:
  enabled: false
  metricsEndpoints:
    - port: metrics
      interval: 15s

# service monitor
serviceMonitor:
  enabled: false
  metricsEndpoints:
    - port: metrics
      interval: 15s

# PDB
podDisruptionBudget:
  enabled: true
  maxUnavailable: 1

# autoscaling
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  behavior: {}
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# rollout/upgrade strategy
rollout:
  strategy: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# prometheus rule
prometheusRule:
  enabled: false

# network policy
networkPolicy:
  enabled: false

# Allow containers to share processes across pod namespace
shareProcessNamespace: false

# Extra volumes for persistent storage
extraVolumes:
  - name: otelcol-storage
    emptyDir: {}

# Mount the storage volume
extraVolumeMounts:
  - name: otelcol-storage
    mountPath: /var/lib/otelcol

extraContainers:
  - name: debug
    image: alpine:latest
    command: ["/bin/sh"]
    args: ["-c", "while true; do sleep 30; done"]
    volumeMounts:
      - name: otelcol-storage
        mountPath: /var/lib/otelcol

lifecycleHooks:
  preStop:
    exec:
      command:
      - /bin/sleep
      - "290"